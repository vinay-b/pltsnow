/* The following code was generated by JFlex 1.4.3 on 4/14/09 11:51 PM */

package com.google.code.pltsnow.gen;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/14/09 11:51 PM from the specification file
 * <tt>snow.l</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\3\25\0\1\65\1\41\1\62\1\4\1\0\1\34"+
    "\1\42\1\64\1\43\1\44\1\32\1\30\1\46\1\31\1\47\1\33"+
    "\12\1\1\45\1\0\1\36\1\40\1\37\2\0\1\60\1\56\1\51"+
    "\2\60\1\57\4\60\1\52\1\60\1\53\1\60\1\55\7\60\1\54"+
    "\3\60\1\0\1\63\1\0\1\35\2\0\1\12\1\26\1\13\1\22"+
    "\1\11\1\7\1\50\1\14\1\16\2\60\1\17\1\25\1\21\1\6"+
    "\2\60\1\10\1\24\1\5\1\20\1\23\1\15\1\60\1\27\1\60"+
    "\1\0\1\2\1\0\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\2\1\3\1\2\20\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\1\4"+
    "\3\2\1\24\1\0\1\25\2\0\1\26\1\27\3\4"+
    "\1\25\11\4\1\30\2\4\1\31\1\32\2\4\1\33"+
    "\6\4\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\1\1\4\1\45\1\0\1\46\4\0"+
    "\1\26\4\4\1\47\5\4\1\50\1\4\1\44\2\4"+
    "\1\16\1\51\1\4\1\52\5\4\2\46\1\26\2\0"+
    "\1\53\1\4\1\54\2\4\1\55\2\4\1\56\1\57"+
    "\12\4\1\0\3\4\1\60\1\4\1\61\1\62\1\4"+
    "\1\63\6\4\1\64\1\4\1\65\1\66\1\4\1\67"+
    "\1\4\1\70\57\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\66\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\66\0\66\0\66\0\66\0\u04da\0\u0510\0\66\0\u0546"+
    "\0\u057c\0\66\0\66\0\66\0\66\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\66\0\u05b2\0\66\0\u06c0\0\u06f6\0\66"+
    "\0\u0288\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u0288\0\u09ea"+
    "\0\u0a20\0\u0288\0\u0288\0\u0a56\0\u0a8c\0\u0288\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0288\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\u05b2\0\u0c06\0\u0c3c"+
    "\0\u0654\0\66\0\u0c72\0\u068a\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0288\0\u0f66\0\u0288\0\u0f9c\0\u0fd2\0\u0288\0\u0288"+
    "\0\u1008\0\u0288\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u0654"+
    "\0\u114c\0\u06c0\0\u0d14\0\u1182\0\u0288\0\u11b8\0\u0288\0\u11ee"+
    "\0\u1224\0\u0288\0\u125a\0\u1290\0\u0288\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u0288\0\u15f0\0\u0288\0\u0288"+
    "\0\u1626\0\u0288\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u0288\0\u17a0\0\u0288\0\u0288\0\u17d6\0\u0288\0\u180c\0\u0288"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\16"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\16\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\10\16\1\50\1\51\1\2\1\52\1\53\67\0\1\3"+
    "\45\0\1\54\20\0\1\55\63\0\2\56\1\57\1\60"+
    "\62\56\1\0\1\16\3\0\1\16\1\61\1\16\1\62"+
    "\1\63\2\16\1\64\13\16\20\0\11\16\6\0\1\16"+
    "\3\0\3\16\1\65\17\16\20\0\11\16\6\0\1\16"+
    "\3\0\1\16\1\66\1\16\1\67\1\16\1\70\15\16"+
    "\20\0\11\16\6\0\1\16\3\0\4\16\1\71\16\16"+
    "\20\0\11\16\6\0\1\16\3\0\5\16\1\72\4\16"+
    "\1\73\1\16\1\74\6\16\20\0\11\16\6\0\1\16"+
    "\3\0\2\16\1\75\11\16\1\76\2\16\1\77\3\16"+
    "\20\0\11\16\6\0\1\16\3\0\7\16\1\100\13\16"+
    "\20\0\11\16\6\0\1\16\3\0\23\16\20\0\11\16"+
    "\6\0\1\16\3\0\7\16\1\101\13\16\20\0\11\16"+
    "\6\0\1\16\3\0\2\16\1\102\11\16\1\103\6\16"+
    "\20\0\11\16\6\0\1\16\3\0\1\16\1\104\7\16"+
    "\1\105\11\16\20\0\11\16\6\0\1\16\3\0\1\16"+
    "\1\106\2\16\1\107\16\16\20\0\11\16\6\0\1\16"+
    "\3\0\5\16\1\110\15\16\20\0\11\16\6\0\1\16"+
    "\3\0\4\16\1\111\16\16\20\0\11\16\6\0\1\16"+
    "\3\0\5\16\1\112\5\16\1\113\7\16\20\0\11\16"+
    "\6\0\1\16\3\0\4\16\1\114\15\16\1\115\20\0"+
    "\11\16\35\0\1\116\36\0\1\3\27\0\1\117\15\0"+
    "\1\54\54\0\1\120\1\0\1\121\64\0\1\122\1\123"+
    "\65\0\1\124\67\0\1\125\24\0\1\126\65\0\1\16"+
    "\3\0\4\16\1\127\16\16\20\0\11\16\12\0\23\130"+
    "\20\0\11\130\5\0\62\131\1\132\1\133\2\131\63\134"+
    "\1\135\1\132\1\134\3\56\1\60\62\56\2\57\1\136"+
    "\1\137\62\57\1\0\1\16\3\0\13\16\1\140\7\16"+
    "\20\0\11\16\6\0\1\16\3\0\3\16\1\141\17\16"+
    "\20\0\11\16\6\0\1\16\3\0\4\16\1\142\16\16"+
    "\20\0\11\16\6\0\1\16\3\0\23\16\20\0\1\143"+
    "\10\16\6\0\1\16\3\0\3\16\1\144\17\16\20\0"+
    "\11\16\6\0\1\16\3\0\1\16\1\145\21\16\20\0"+
    "\11\16\6\0\1\16\3\0\12\16\1\146\10\16\20\0"+
    "\11\16\6\0\1\16\3\0\1\147\22\16\20\0\11\16"+
    "\6\0\1\16\3\0\6\16\1\150\14\16\20\0\11\16"+
    "\6\0\1\16\3\0\17\16\1\151\3\16\20\0\11\16"+
    "\6\0\1\16\3\0\15\16\1\152\5\16\20\0\11\16"+
    "\6\0\1\16\3\0\1\153\22\16\20\0\11\16\6\0"+
    "\1\16\3\0\15\16\1\154\5\16\20\0\11\16\6\0"+
    "\1\16\3\0\11\16\1\155\11\16\20\0\11\16\6\0"+
    "\1\16\3\0\11\16\1\156\11\16\20\0\11\16\6\0"+
    "\1\16\3\0\1\157\22\16\20\0\11\16\6\0\1\16"+
    "\3\0\12\16\1\160\10\16\20\0\11\16\6\0\1\16"+
    "\3\0\2\16\1\161\20\16\20\0\11\16\6\0\1\16"+
    "\3\0\3\16\1\162\17\16\20\0\11\16\6\0\1\16"+
    "\3\0\12\16\1\163\10\16\20\0\11\16\6\0\1\16"+
    "\3\0\1\164\22\16\20\0\11\16\6\0\1\16\3\0"+
    "\1\165\22\16\20\0\11\16\6\0\1\16\3\0\2\16"+
    "\1\166\20\16\20\0\11\16\6\0\1\16\3\0\14\16"+
    "\1\167\6\16\20\0\11\16\6\0\1\130\3\0\23\130"+
    "\20\0\11\130\5\0\62\131\1\170\1\133\2\131\63\134"+
    "\1\135\1\171\1\134\2\57\1\136\1\137\1\172\61\57"+
    "\2\173\1\174\63\173\1\0\1\16\3\0\4\16\1\175"+
    "\16\16\20\0\11\16\6\0\1\16\3\0\20\16\1\176"+
    "\2\16\20\0\11\16\6\0\1\16\3\0\14\16\1\177"+
    "\6\16\20\0\11\16\6\0\1\16\3\0\5\16\1\200"+
    "\15\16\20\0\11\16\6\0\1\16\3\0\4\16\1\201"+
    "\16\16\20\0\11\16\6\0\1\16\3\0\20\16\1\202"+
    "\2\16\20\0\11\16\6\0\1\16\3\0\17\16\1\203"+
    "\3\16\20\0\11\16\6\0\1\16\3\0\13\16\1\204"+
    "\7\16\20\0\11\16\6\0\1\16\3\0\7\16\1\205"+
    "\13\16\20\0\11\16\6\0\1\16\3\0\4\16\1\206"+
    "\4\16\1\207\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\210\16\16\20\0\11\16\6\0\1\16\3\0"+
    "\12\16\1\211\10\16\20\0\11\16\6\0\1\16\3\0"+
    "\12\16\1\212\10\16\20\0\11\16\6\0\1\16\3\0"+
    "\11\16\1\213\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\214\16\16\20\0\11\16\6\0\1\16\3\0"+
    "\11\16\1\215\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\5\16\1\216\15\16\20\0\11\16\6\0\1\16\3\0"+
    "\1\16\1\217\21\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\220\16\16\20\0\11\16\70\0\1\221\2\0"+
    "\2\173\1\174\1\173\1\60\61\173\1\0\1\16\3\0"+
    "\11\16\1\222\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\14\16\1\223\6\16\20\0\11\16\6\0\1\16\3\0"+
    "\5\16\1\224\15\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\225\16\16\20\0\11\16\6\0\1\16\3\0"+
    "\3\16\1\226\17\16\20\0\11\16\6\0\1\16\3\0"+
    "\11\16\1\207\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\2\16\1\227\20\16\20\0\11\16\6\0\1\16\3\0"+
    "\3\16\1\230\17\16\20\0\11\16\6\0\1\16\3\0"+
    "\15\16\1\231\5\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\232\16\16\20\0\11\16\6\0\1\16\3\0"+
    "\14\16\1\233\6\16\20\0\11\16\6\0\1\16\3\0"+
    "\6\16\1\216\14\16\20\0\11\16\6\0\1\16\3\0"+
    "\14\16\1\234\6\16\20\0\11\16\6\0\1\16\3\0"+
    "\1\235\22\16\20\0\11\16\6\0\1\16\3\0\3\16"+
    "\1\236\17\16\20\0\11\16\6\0\1\16\3\0\3\16"+
    "\1\165\17\16\20\0\11\16\26\0\1\134\45\0\1\16"+
    "\3\0\14\16\1\165\6\16\20\0\11\16\6\0\1\16"+
    "\3\0\11\16\1\237\11\16\20\0\11\16\6\0\1\16"+
    "\3\0\6\16\1\240\14\16\20\0\11\16\6\0\1\16"+
    "\3\0\14\16\1\241\6\16\20\0\11\16\6\0\1\16"+
    "\3\0\23\16\20\0\6\16\1\242\2\16\6\0\1\16"+
    "\3\0\4\16\1\243\16\16\20\0\11\16\6\0\1\16"+
    "\3\0\23\16\20\0\1\244\10\16\6\0\1\16\3\0"+
    "\11\16\1\245\11\16\20\0\11\16\6\0\1\16\3\0"+
    "\4\16\1\246\16\16\20\0\11\16\6\0\1\16\3\0"+
    "\17\16\1\247\3\16\20\0\11\16\6\0\1\16\3\0"+
    "\7\16\1\250\13\16\20\0\11\16\6\0\1\16\3\0"+
    "\1\16\1\251\21\16\20\0\11\16\6\0\1\16\3\0"+
    "\1\16\1\252\21\16\20\0\11\16\6\0\1\16\3\0"+
    "\20\16\1\253\2\16\20\0\11\16\6\0\1\16\3\0"+
    "\3\16\1\252\17\16\20\0\11\16\6\0\1\16\3\0"+
    "\14\16\1\244\6\16\20\0\11\16\6\0\1\16\3\0"+
    "\23\16\20\0\1\16\1\254\1\255\1\256\3\16\1\257"+
    "\1\16\6\0\1\16\3\0\1\16\1\260\21\16\20\0"+
    "\11\16\6\0\1\16\3\0\11\16\1\261\11\16\20\0"+
    "\11\16\6\0\1\16\3\0\5\16\1\262\5\16\1\263"+
    "\7\16\20\0\11\16\6\0\1\16\3\0\11\16\1\264"+
    "\11\16\20\0\11\16\6\0\1\16\3\0\14\16\1\265"+
    "\6\16\20\0\11\16\6\0\1\16\3\0\12\16\1\266"+
    "\10\16\20\0\11\16\6\0\1\16\3\0\1\267\22\16"+
    "\20\0\11\16\6\0\1\16\3\0\1\270\22\16\20\0"+
    "\11\16\6\0\1\16\3\0\1\271\22\16\20\0\11\16"+
    "\6\0\1\16\3\0\17\16\1\272\3\16\20\0\11\16"+
    "\6\0\1\16\3\0\12\16\1\273\10\16\20\0\11\16"+
    "\6\0\1\16\3\0\4\16\1\274\16\16\20\0\11\16"+
    "\6\0\1\16\3\0\5\16\1\275\15\16\20\0\11\16"+
    "\6\0\1\16\3\0\14\16\1\276\6\16\20\0\11\16"+
    "\6\0\1\16\3\0\1\277\22\16\20\0\11\16\6\0"+
    "\1\16\3\0\4\16\1\300\16\16\20\0\11\16\6\0"+
    "\1\16\3\0\17\16\1\301\3\16\20\0\11\16\6\0"+
    "\1\16\3\0\1\273\22\16\20\0\11\16\6\0\1\16"+
    "\3\0\4\16\1\302\16\16\20\0\11\16\6\0\1\16"+
    "\3\0\3\16\1\303\17\16\20\0\11\16\6\0\1\16"+
    "\3\0\15\16\1\244\5\16\20\0\11\16\6\0\1\16"+
    "\3\0\23\16\20\0\4\16\1\304\4\16\6\0\1\16"+
    "\3\0\17\16\1\305\3\16\20\0\11\16\6\0\1\16"+
    "\3\0\13\16\1\306\7\16\20\0\11\16\6\0\1\16"+
    "\3\0\11\16\1\307\11\16\20\0\11\16\6\0\1\16"+
    "\3\0\17\16\1\310\3\16\20\0\11\16\6\0\1\16"+
    "\3\0\6\16\1\275\14\16\20\0\11\16\6\0\1\16"+
    "\3\0\1\311\22\16\20\0\11\16\6\0\1\16\3\0"+
    "\23\16\20\0\1\16\1\312\7\16\6\0\1\16\3\0"+
    "\7\16\1\313\13\16\20\0\11\16\6\0\1\16\3\0"+
    "\7\16\1\314\13\16\20\0\11\16\6\0\1\16\3\0"+
    "\23\16\20\0\5\16\1\315\3\16\6\0\1\16\3\0"+
    "\5\16\1\316\15\16\20\0\11\16\6\0\1\16\3\0"+
    "\3\16\1\317\17\16\20\0\11\16\6\0\1\16\3\0"+
    "\14\16\1\320\6\16\20\0\11\16\6\0\1\16\3\0"+
    "\23\16\20\0\1\321\10\16\6\0\1\16\3\0\23\16"+
    "\20\0\1\322\10\16\6\0\1\16\3\0\5\16\1\323"+
    "\15\16\20\0\11\16\6\0\1\16\3\0\4\16\1\324"+
    "\16\16\20\0\11\16\6\0\1\16\3\0\14\16\1\325"+
    "\6\16\20\0\11\16\6\0\1\16\3\0\17\16\1\244"+
    "\3\16\20\0\11\16\6\0\1\16\3\0\11\16\1\326"+
    "\11\16\20\0\11\16\6\0\1\16\3\0\17\16\1\327"+
    "\3\16\20\0\11\16\6\0\1\16\3\0\20\16\1\244"+
    "\2\16\20\0\11\16\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\23\1\4\11\2\1\1\11"+
    "\2\1\4\11\5\1\1\11\1\0\1\11\2\0\1\11"+
    "\35\1\10\11\3\1\1\0\1\11\4\0\34\1\2\0"+
    "\24\1\1\0\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* store a reference to the parser object */
  private static Parser yyparser;

  /* constructor taking an additional parser object */
  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return yyparser.NIL;
          }
        case 57: break;
        case 56: 
          { return yyparser.FOREACH;
          }
        case 58: break;
        case 13: 
          { return yyparser.EQUALS;
          }
        case 59: break;
        case 3: 
          { yyparser.yylval= new ParserVal("\n"); return yyparser.NEWLINE;
          }
        case 60: break;
        case 2: 
          { return 0;
          }
        case 61: break;
        case 39: 
          { return yyparser.FOR;
          }
        case 62: break;
        case 46: 
          { return yyparser.EACH;
          }
        case 63: break;
        case 36: 
          { return yyparser.LOG_OP_AND;
          }
        case 64: break;
        case 14: 
          { return yyparser.LOG_OP_NOT;
          }
        case 65: break;
        case 34: 
          { return yyparser.REL_OP_GE;
          }
        case 66: break;
        case 50: 
          { return yyparser.AFTER;
          }
        case 67: break;
        case 9: 
          { return yyparser.MODULO;
          }
        case 68: break;
        case 7: 
          { return yyparser.MUL;
          }
        case 69: break;
        case 1: 
          { yyparser.yylval = new ParserVal(yytext()); return yyparser.NUMERIC;
          }
        case 70: break;
        case 42: 
          { return yyparser.VAR;
          }
        case 71: break;
        case 12: 
          { return yyparser.REL_OP_GT;
          }
        case 72: break;
        case 52: 
          { return yyparser.RETURN;
          }
        case 73: break;
        case 4: 
          { yyparser.yylval = new ParserVal(yytext()); return yyparser.IDENTIFIER;
          }
        case 74: break;
        case 26: 
          { return yyparser.IN;
          }
        case 75: break;
        case 40: 
          { return yyparser.END;
          }
        case 76: break;
        case 38: 
          { yyparser.yylval = new ParserVal(yytext()); return yyparser.STRING;
          }
        case 77: break;
        case 35: 
          { return yyparser.REL_OP_NE;
          }
        case 78: break;
        case 15: 
          { return yyparser.LPAREN;
          }
        case 79: break;
        case 16: 
          { return yyparser.RPAREN;
          }
        case 80: break;
        case 48: 
          { return yyparser.FALSE;
          }
        case 81: break;
        case 54: 
          { yyparser.yylval = new ParserVal(yytext()); return yyparser.EVENT_NAME_IDENTIFIER;
          }
        case 82: break;
        case 18: 
          { return yyparser.COMMA;
          }
        case 83: break;
        case 37: 
          { yyparser.yylval = new ParserVal(yytext()); return yyparser.SYS_IDENTIFIER;
          }
        case 84: break;
        case 28: 
          { return yyparser.BY;
          }
        case 85: break;
        case 29: 
          { return yyparser.PLUSPLUS;
          }
        case 86: break;
        case 55: 
          { return yyparser.BEFORE;
          }
        case 87: break;
        case 53: 
          { return yyparser.DEFINE;
          }
        case 88: break;
        case 32: 
          { return yyparser.REL_OP_LE;
          }
        case 89: break;
        case 27: 
          { return yyparser.DO;
          }
        case 90: break;
        case 19: 
          { return yyparser.DOT;
          }
        case 91: break;
        case 17: 
          { return yyparser.COLON;
          }
        case 92: break;
        case 21: 
          { return yyparser.LOG_OP_OR;
          }
        case 93: break;
        case 24: 
          { return yyparser.AS;
          }
        case 94: break;
        case 30: 
          { return yyparser.MINUSMINUS;
          }
        case 95: break;
        case 49: 
          { return yyparser.ELSIF;
          }
        case 96: break;
        case 8: 
          { return yyparser.DIV;
          }
        case 97: break;
        case 44: 
          { return yyparser.THEN;
          }
        case 98: break;
        case 33: 
          { return yyparser.LIST_OP_POP;
          }
        case 99: break;
        case 11: 
          { return yyparser.REL_OP_LT;
          }
        case 100: break;
        case 10: 
          { return yyparser.POWER;
          }
        case 101: break;
        case 22: 
          { yyparser.yylval = new ParserVal(""); return yyparser.NEWLINE;
          }
        case 102: break;
        case 47: 
          { return yyparser.ELSE;
          }
        case 103: break;
        case 23: 
          { return yyparser.TO;
          }
        case 104: break;
        case 45: 
          { return yyparser.FROM;
          }
        case 105: break;
        case 43: 
          { return yyparser.TRUE;
          }
        case 106: break;
        case 31: 
          { return yyparser.LIST_OP_PUSH;
          }
        case 107: break;
        case 5: 
          { return yyparser.PLUS;
          }
        case 108: break;
        case 51: 
          { return yyparser.WHILE;
          }
        case 109: break;
        case 25: 
          { return yyparser.IF;
          }
        case 110: break;
        case 6: 
          { return yyparser.MINUS;
          }
        case 111: break;
        case 20: 
          { 
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
