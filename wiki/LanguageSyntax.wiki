#summary Example program/snippets demonstrating functionality
#labels Phase-Requirements,Phase-Design,Featured

= Introduction =

Example program/snippets demonstrating functionality

= Keywords = 
== Predefined Events  == 

  each _EVENT_ {IMPLICIT PARAMETER}

  each _generation_ occurs as an entire iteration happens

  each _mutation_ occurs at the mutation stage 

  each _mating_ occurs at the mating stage

  each _selection_ occurs at the selection stage

  each _organism constructed_ {organism} occurs as a single organism is created.  Initial creation-inclusive.

  each _organism killed_ {organism} occurs as a single organism is removed from the population.

  each _organism mutated_ {organism} occurs as a single organism is randomly mutated.

  each _organism mates with organism_ {organism_a organism_b} occurs when two organisms recombine to construct a new organism.

  each _child born_ {organism} occurs as a single organism is created through mating. Initial creation-exclusive.

  each _organism fitness changes_ {organism} occurs as the fitness of an organism changes.

== Debugging Modifiers == 
  _before_ hooks action to pre-event

  _after_ *default* hooks action to post-event


== Environmental Parameters ==
  population size

  mutation rate


== Environmental Variables/Descriptors ==
  _average fitness_

  _average age_


== Functions/Operators ==

  _to_

=== List operators ===
{{{
first()
last()
max()
min() 
sum()
average() 
append()
extend()
pop() 
push() 
index() 
for..in..
reverse() 
filter() 
search() 
sort()
}}}

=== Chromosome Operators ===
`splice [at \d[%] [and \d]]`  on two implicit chromosomes

= Snippets =

{{{
to construct organism:
    (global organism.count)
    name = count;  // dynamic construction
    fingers = 10;  // random construction
    for gene in chromosome:
        gene.x = gene.count;
        gene.y = random; // automatic typing


to mate male and female:
    splice [at 5[%] [and 10]]

to mutate organism:
    // mate with implicit random organism

each generation:
        population_size = population_size *= 1.01
        // etc.
        // these variable are evaluated each generation

// debugging statements
before organism killed:
    print "killing organism"

after mutations:
    print "done with mutations"
}}}