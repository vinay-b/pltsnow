#|
These two variables define the stopping criteria. You can specify either or both. EndGenerationswill limit the number of generations to run for (may not be optimal!). EndFitness will limit to some fitness stopping point. If you provide both, then it will stop at whichever comes first.
|#
~endGenerations= -1
~endFitness     = 8
~populationSize = 100


define chromosome:
 # equivalent to "8 genes"
 8 gene
end

define organism:
 1 chromosome
end
to construct: newOrganism
 #Set each gene to have a random num, 0 or 1
 foreach gene in newOrganism.chromosome as gene1
  # randI - random, inclusive
  gene1 = randI: 0, 1
 end
 return newOrganism
end

to evaluateFitness: org
 var curfit
 curfit = 0

    #Loop over each gene except for the last one
    foreach gene in org.chromosome as gene1
     curfit = curfit + gene1
    end

 return curfit
end

to mate: organismA, organismB, newOrganism
  newOrganism.chromosome = splice: ((rand: 0 100) / 100), organismA.chromosome, organismB.chromosome
  return newOrganism
end

to mutate: organismA
	#mutate the organism by randomly changing a gene
	setNth: organismA.chromosome,(randI: 0 7), randI: 0 1
	return organismA
end

after generation:
  print: "average fitness: " + ~averageFitness
  printPopulation: 
end

before termination:
 print: ~endFitness
end

