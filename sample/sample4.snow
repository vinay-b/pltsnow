#These two variables define the stopping criteria. You can specify either or 
~endGenerations= 800
~endFitness     = 28
#~topParentPool  = 0.1
~mutationRate   = (rand: 1 5)/10
~populationSize = 100

#This defines a chromosome. In this case, a chromosome is composed of 8 genes
define chromosome:
	8 gene
end

define organism:
	1 chromosome
end
#This defines an organism and how it is initialized
to construct: newOrganism
	#Set each gene to have a random value from 0-7
	foreach gene in newOrganism.chromosome as gene1
		gene1 = rand: 0 8
	end
	return newOrganism
end

to evaluateFitness: checkOrganism
	var curfit = 28
	var i,j,gene1,gene2
  
	for i from 1 to 6
		# a deep copy. by value
		gene1 = nth: checkOrganism.chromosome, i
 
		for j from 0 to 7
			gene2 = nth: checkOrganism.chromosome, j
   
   			if gene1 = gene2 and i = j then
   				#do nothing
			#Check to see if gene1 and gene2 are in the same row
			elseif gene1 = gene2 then
				curfit = curfit - 1
			#check for same column!
			#elseif i = j then
			#	curfit = curfit - 1
			#Check to see if they are along the same diagonal
			elseif ((gene1 - gene2) / (i - j)) = 1 then
				curfit = curfit - 1
			end
		end
	end

	return 28 - curfit
end

to mate: organismA organismB child
	#Randomly splice 2 organisms to get the child
	child.chromosome = splice: (rand: 0 8) organismA.chromosome organismB.chromosome
	return child
end

to mutate: organismA
	#mutate the organism by randomly changing a gene
	setNth: organismA.chromosome,(rand: 0 8), rand: 0 8
	return organismA
end

before generation:
	print: "average fitness: " + ~averageFitness
end

after termination:
	printPopulation:
	print: "The best solution found was:\n"
	foreach organism in ~population as org1
		if (evaluateFitness: org1) = ~endFitness then
		#this is the optimal solution, print it out
			var i
       		for i from 0 to 7
 				print: "queen at" + i + ","  + (nth: i, organism.chromosome.gene) + "\n"
			end
		end
	end
end
